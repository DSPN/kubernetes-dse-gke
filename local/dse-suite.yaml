apiVersion: v1
kind: Service
metadata:
  name: dse-ext-lb
  labels:
    app: dse
spec:
  type: LoadBalancer
  ports:
  - port: 9042
    name: cql-port
  selector:
    app: dse
---
apiVersion: v1
kind: Service
metadata:
  name: dse 
  labels:
    app: dse
spec:
  ports:
  - port: 9042
    name: cql-port
  - port: 9103
    name: port-9103
  clusterIP: None
  selector:
    app: dse
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: dse
spec:
  selector:
    matchLabels:
      app: dse
  serviceName: "dse"
  replicas: 3
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: dse
    spec:
      securityContext:
        fsGroup: 999
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - dse
            topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 12000
      containers:
      - name: dse
        image: datastax/dse-server:6.7.1
        args: ["-s", "-k", "-g"]
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: "2"
            memory: "4000Mi"
        env:
        - name: DS_LICENSE
          value: accept
        - name: SEEDS
          value: dse-0.dse.default.svc.cluster.local,dse-1.dse.default.svc.cluster.local,dse-2.dse.default.svc.cluster.local
        - name: CLUSTER_NAME
          value: "Test_Cluster"
        - name: NUM_TOKENS
          value: "64"
        - name: DC
          value: "DC-1"
        - name: RACK
          value: "rack-1"
        - name: SNITCH
          value: GossipingPropertyFileSnitch
        ports:
        - containerPort: 7000
          name: intra-node-port
        - containerPort: 7001
          name: tls-intra-node
        - containerPort: 7199
          name: jmx-port
        - containerPort: 8609
          name: inter-node-msg
        - containerPort: 9042
          name: cql-port
        - containerPort: 9160
          name: thrift-port
        - containerPort: 8983
          name: solr-port
        - containerPort: 8984
          name: solr-int-node
        - containerPort: 4040
          name: spark-app-port
        - containerPort: 7077
          name: spark-int-node
        - containerPort: 7080
          name: spark-m-web
        - containerPort: 7081
          name: spark-w-web
        - containerPort: 8090
          name: spark-job
        - containerPort: 9103
          name: port-9103
        - containerPort: 9999
          name: spark-job-jmx
        - containerPort: 18080
          name: spark-histor
        - containerPort: 8182
          name: gremlin-port
        - containerPort: 5598
          name: dsefs-public
        - containerPort: 5599
          name: dsefs-private
        - containerPort: 61621
          name: ds-agent-port
        volumeMounts:
        - name: dse-data
          mountPath: /var/lib/cassandra
        - name: config-volume
          mountPath: /config
        - name: prometheus-volume
          mountPath: /opt/dse/resources/dse/collectd/etc/collectd
        livenessProbe:
          tcpSocket:
            port: 9042
          initialDelaySeconds: 900
          timeoutSeconds: 1
          periodSeconds: 30
          failureThreshold: 10
        lifecycle:
          postStart:
            exec:
              command: ['/bin/sh', '-c', 'until cqlsh -e "describe cluster"; do echo waiting for DSE Startup Complete; sleep 10; done;']
          preStop:
            exec:
              command: ["/bin/sh", "-c", "exec nodetool decommission"]
      volumes:
      - name: config-volume
        configMap:
          name: dse-config
      - name: prometheus-volume
        configMap:
          name: prometheus-conf-config
      - name: dse-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  labels:
    app: prometheus
spec:
  ports:
  - port: 9090
    name: port-9090
  clusterIP: None
  selector:
    app: prometheus
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
spec:
  selector:
    matchLabels:
      app: prometheus
  serviceName: "prometheus"
  replicas: 1
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: dse-metric-dashboards-prometheus-demo
        image: "prom/prometheus:v2.4.3"
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: "2"
            memory: "4000Mi"
        ports:
        - containerPort: 9090
          name: port-9090
        volumeMounts:
        - name: prometheus-data
          mountPath: /prometheus
        - name: prometheus-volume
          mountPath: /etc/prometheus
      volumes:
      - name: prometheus-volume
        configMap:
          name: prometheus-config
      - name: prometheus-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-ext-lb
  labels:
    app: grafana
spec:
  type: LoadBalancer
  ports:
  - port: 3000
    name: port-3000
  selector:
    app: grafana
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  labels:
    app: grafana
spec:
  ports:
  - port: 3000
    name: port-3000
  clusterIP: None
  selector:
    app: grafana
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: grafana
spec:
  selector:
    matchLabels:
      app: grafana
  serviceName: "grafana"
  replicas: 1
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: dse-grafana-demo
        image: "grafana/grafana:5.3.2"
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: "2"
            memory: "4000Mi"
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: admin
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "true"
        ports:
        - containerPort: 3000
          name: port-3000
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-provisioning-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-provisioning-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
      volumes:
      - name: grafana-data
        emptyDir: {}
      - name: grafana-provisioning-datasources
        configMap:
          name: grafana-provisioning-datasource-config
      - name: grafana-provisioning-dashboards
        configMap:
          name: grafana-provisioning-dashboards-config
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards-config
